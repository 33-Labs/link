import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import useSWR from 'swr'
import { genlinkCheckerScript, getLinkStatus, getNFTCatalog } from '../flow/scripts'
import publicConfig from '../publicConfig'
import ErrorPage from './404'

const catalogFetcher = async (funcName) => {
  return await getNFTCatalog()
}

const linkStatusFetcher = async (funcName, account, catalog) => {
  return await getLinkStatus(account, catalog)
}

// There are some records with duplicate contractName
// contracts with duplicate contractName can't be imported in
// the same cadence code, so we just handle the first one
const filterCatalog = (catalog) => {
  let cleaned = {}
  let contractNames = {}
  for (const [catalogName, metadata] of Object.entries(catalog)) {
    if (!contractNames[metadata.contractName]) {
      cleaned[catalogName] = metadata
    }
  }
  return cleaned
}

export default function Home(props) {
  const user = props.user
  const account = user && user.loggedIn ? user.addr : null

  const { data: catalogData, error: catalogError } = useSWR(["catalogFetcher"], catalogFetcher)
  const [catalog, setCatalog] = useState(null)
  const [linkStatus, setLinkStatus] = useState(null)

  useEffect(() => {
    if (catalogData) {
      setCatalog(filterCatalog(catalogData))
    }
  }, [catalogData])

  if (catalogError) {
    return <ErrorPage code={catalogError.statusCode} title={"Get NFTCatalog Failed"} detail={"Please check you network status and try again"} />
  }

  const { data: statusData, error: statusError } = useSWR(
    (catalog && account) ? ["linkStatusFetcher", account, catalog] : null, linkStatusFetcher)

  useEffect(() => {
    if (statusData) { setLinkStatus(statusData) }
  }, [statusData])

  if (statusError) {
    return <ErrorPage code={statusError.statusCode} title={"Get Link Status Failed"} detail={"Please check you network status and try again"} />
  }

  console.log(catalog)
  console.log(linkStatus)


  return (
    <div className="container mx-auto max-w-[920px] min-w-[380px] px-6">
      <Head>
        <title>Link | Flow Link Tool</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {
        linkStatus ?
          <div className="flex flex-col gap-y-3 w-full">
            {linkStatus.unlinked.length > 0 ?
              <>
                <label className="font-flow font-bold text-2xl">Not Linked</label>
                {
                  linkStatus.unlinked.map((name) => {
                    const nft = catalog[name]
                    console.log("nft: ", catalog[name])
                    const imageURL = nft.collectionDisplay.squareImage.file.url
                    return (
                      <div className="flex gap-x-3 items-center justify-between w-full px-4 py-4 rounded-3xl 
            ring-1 ring-black ring-opacity-10 overflow-hidden bg-white">
                        <div className='flex gap-x-3 items-center'>
                          <div className="h-[40px] w-[40px] relative rounded-xl overflow-hidden hidden sm:block bg-emerald">
                            <Image src={`/api/imageproxy?url=${encodeURIComponent(imageURL)}`} alt="" layout="fill" objectFit="cover" />
                          </div>
                          <label className="font-flow font-bold text-lg truncate">{name}</label>
                        </div>

                        <button
                          className="shrink truncate font-flow text-base
                        text-black shadow-sm font-bold w-[80px]
                        hover:bg-emerald-dark
                        bg-emerald rounded-full px-3 py-2 leading-5"
                          onClick={() => {

                          }}
                        >
                          LINK
                        </button>
                      </div>
                    )
                  })
                }
              </>
              : null}

          </div>
          : null}

    </div>
  )
}
